//
//  SearchWikipediaWorkerWorker.swift
//  WikipediaSearchApp
//
//  Created by DEEP PRADHAN on 18/10/18.
//  Copyright (c) 2018 DEEP PRADHAN. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum FetchDataResult<U> {
    case success(result: U)
    case failure(error: FetchDataError)
}

enum FetchDataError {
    case cannotFetch(String)
}

class SearchWikipediaInteractorWorker
{
    
    func fetchWikipediaResult(searchWikipediaWithString: String, completionHandler: @escaping(_ result: FetchDataResult <[SearchedInformation]>) -> Void) {
        let searchStr = searchWikipediaWithString.replacingOccurrences(of: " ", with: "+")
        let url = URL.init(string: "https://en.wikipedia.org//w/api.php?action=query&format=json&prop=pageimages%7Cpageterms&generator=prefixsearch&redirects=1&formatversion=2&piprop=thumbnail&pithumbsize=50&pilimit=10&wbptterms=description&gpssearch=\(searchStr)&gpslimit=10")
        
        if (url != nil) {
            let session = URLSession.shared
            let data = session.dataTask(with: url!) { (data, response, error) in
                guard let data = data
                    else {
                        completionHandler(FetchDataResult.failure(error: FetchDataError.cannotFetch("Cannot Fetch")))
                        return
                }
                do {
                    let json: [String: Any] = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as! [String: Any]
                    print(json)
                    
                    if let query = json["query"] as? [String: Any],  let pages = query["pages"] as? [Any] {
                        let result = self.parsePages(pages: pages)
                        completionHandler(FetchDataResult.success(result: result))
                    }
                } catch {
                    completionHandler(FetchDataResult.failure(error: FetchDataError.cannotFetch("Cannot Fetch")))
                    print("json error: \(error)")
                }
            }
            data.resume()
        }
    }
    
    private func parsePages(pages: [Any]) -> [SearchedInformation] {
        var pagesArr: [SearchedInformation] = [ ]
        for (_, element) in pages.enumerated() {
            let dict = element as! [String: Any]
            var title: String = ""
            var imageUrl: String = ""
            var description: String = ""
            
            if let searchedTitle = dict["title"] as? String {
                title = searchedTitle
            }
            
            if let searchedThumbnail = dict["thumbnail"] as? [String: Any], let source = searchedThumbnail["source"] as? String {
                imageUrl = source
            }
            
            if let searchedTerms = dict["terms"] as? [String: Any], let searchedDescription = searchedTerms["description"] as? [String], let desc = searchedDescription[0] as? String {
                description = desc
            }
            
            
            pagesArr.append(SearchedInformation.init(page: Pages.init(title: title,
                                                                      imageUrl: imageUrl,
                                                                      description: description)))
        }
        return pagesArr
    }
}
