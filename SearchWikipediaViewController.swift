    //
    //  SearchWikipediaViewControllerViewController.swift
    //  WikipediaSearchApp
    //
    //  Created by DEEP PRADHAN on 18/10/18.
    //  Copyright (c) 2018 DEEP PRADHAN. All rights reserved.
    //
    //  This file was generated by the Clean Swift Xcode Templates so
    //  you can apply clean architecture to your iOS and Mac projects,
    //  see http://clean-swift.com
    //
    
    import UIKit
    
    protocol SearchWikipediaViewControllerDisplayLogic: class
    {
        func displaySearchResult(viewModel: SearchWikipediaModel.ShowSearchResult.ViewModel)
    }
    
    class SearchWikipediaViewController: UIViewController, SearchWikipediaViewControllerDisplayLogic, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate {
        @IBOutlet weak var searchBar: UISearchBar!
        @IBOutlet weak var searchResultsTableView: UITableView!
        var interactor: SearchWikipediaInteractor?
        var totalSearchResultReceived: [SearchedInformation] = []
        var indicator = UIActivityIndicatorView()
        
        // MARK: Object lifecycle
        
        override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
        {
            super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
            setup()
        }
        
        required init?(coder aDecoder: NSCoder)
        {
            super.init(coder: aDecoder)
            setup()
        }
        
        // MARK: Setup
        
        private func setup()
        {
            let viewController = self
            let interactor = SearchWikipediaInteractor()
            let presenter = SearchWikipediaPresenter()
            viewController.interactor = interactor
            interactor.presenter = presenter
            presenter.viewController = viewController
        }
        
        
        // MARK: View lifecycle
        
        override func viewDidLoad()
        {
            super.viewDidLoad()
            self.searchResultsTableView.tableFooterView = UIView()
            setTableViewDelegates()
            registerCell()
            setSearchBarDelegate()
            self.indicator = UIActivityIndicatorView.init(frame: CGRect.init(x: self.view.frame.width/2, y: self.view.frame.height/2, width: 50, height: 50))
            self.definesPresentationContext = true
        }
        
        private func setTableViewDelegates() {
            searchResultsTableView.delegate = self
            searchResultsTableView.dataSource = self
        }
        
        private func setSearchBarDelegate() {
            searchBar.delegate = self
        }
        
        //MARK: Loader
        private func showLoader() {
            DispatchQueue.main.async {
             //   self.indicator.removeFromSuperview()
                self.indicator.color = UIColor.black
                self.indicator.hidesWhenStopped = true
                self.indicator.startAnimating()
                self.view.addSubview(self.indicator)
            }
            
        }
        
        private func stopLoader() {
            indicator.stopAnimating()
            indicator.isHidden = true
        }
        
        private func registerCell() {
            self.searchResultsTableView.register(UINib (nibName: "SearchResultsTableViewCell", bundle: Bundle.main), forCellReuseIdentifier: "wikipediaSearchCell")
            
        }
        
        //MARK: Table View Methods
        public func numberOfSections(in tableView: UITableView) -> Int {
            return  self.totalSearchResultReceived.count
        }
        
        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
            return 1
        }
        
        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
            let cell = self.searchResultsTableView.dequeueReusableCell(withIdentifier: "wikipediaSearchCell") as! SearchResultsTableViewCell
            let searchedInfo = self.totalSearchResultReceived[indexPath.section] as? SearchedInformation
            cell.configureCell(data: searchedInfo?.page)
            return cell
        }
        
        //MARK: Search Bar DelegateMethods
        func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
            self.totalSearchResultReceived.removeAll()
            DispatchQueue.main.async {
                self.searchResultsTableView.reloadData()
            }
        }
        
        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            if let searchText = searchBar.text {
                if (searchText.count >= 3) {
                    showLoader()
                    fetchQuery(searchWikipediaWith: searchText)
                }
                if (searchText.count == 0) {
                    self.totalSearchResultReceived.removeAll()
                    DispatchQueue.main.async {
                        self.stopLoader()
                        self.searchResultsTableView.reloadData()
                    }
                }
            }
        }
        func searchBarShouldBeginEditing(_ searchBar: UISearchBar) -> Bool {
            return true
        }
        
        
        func searchBarShouldEndEditing(_ searchBar: UISearchBar) -> Bool {
            return false
        }
        
        // MARK: Fetch Query
        func fetchQuery(searchWikipediaWith: String) {
            let request = SearchWikipediaModel.FetchResponse.Request(search: searchWikipediaWith)
            interactor?.queryWikipedia(request: request)
        }
        
        func displaySearchResult(viewModel: SearchWikipediaModel.ShowSearchResult.ViewModel) {
            self.totalSearchResultReceived = viewModel.showResult
            DispatchQueue.main.async {
                self.stopLoader()
                self.searchResultsTableView.reloadData()
            }
        }
    }
